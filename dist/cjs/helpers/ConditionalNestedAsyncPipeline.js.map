{"version":3,"file":"ConditionalNestedAsyncPipeline.js","sources":["../../../src/helpers/ConditionalNestedAsyncPipeline.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport useWillPipe from '../hooks/use-will-pipe'\r\nimport TriggerPipelineOnCallback from '../triggers/TriggerPipelineOnCallback'\r\nimport get from 'lodash/get'\r\nimport AsyncPipeline from './AsyncPipeline'\r\n\r\nexport default function ConditionalNestedAsyncPipeline ({ children, when, matches }) {\r\n  const callbackRef = React.useRef(null)\r\n\r\n  const updateCallbackRef = (callback) => {\r\n    callbackRef.current = callback\r\n  }\r\n\r\n  const check = React.useCallback(payload => {\r\n    const value = get(payload, when)\r\n\r\n    if (value === matches) {\r\n      return true\r\n    }\r\n\r\n    if (typeof matches === 'function') {\r\n      return matches(value)\r\n    }\r\n\r\n    return false\r\n  }, [when, matches])\r\n\r\n  useWillPipe((payload) => new Promise((resolve, reject) => {\r\n    if (check(payload)) {\r\n      Promise.resolve(callbackRef.current(payload))\r\n        .then((p = {}) => {\r\n          let finalP = { ...payload }\r\n\r\n          if (Array.isArray(p)) {\r\n            p.forEach((_p) => {\r\n              finalP = { ...finalP, ..._p }\r\n            })\r\n          }\r\n\r\n          resolve(finalP)\r\n        })\r\n        .catch((err) => {\r\n          reject(err)\r\n        })\r\n    } else {\r\n      resolve(payload)\r\n    }\r\n  }), [check])\r\n\r\n  return (\r\n    <AsyncPipeline>\r\n      <TriggerPipelineOnCallback callback={updateCallbackRef} />\r\n      {children}\r\n    </AsyncPipeline>\r\n  )\r\n}\r\n\r\nConditionalNestedAsyncPipeline.propTypes = {\r\n  when: PropTypes.string.isRequired,\r\n  matches: PropTypes.any\r\n}\r\n"],"names":["ConditionalNestedAsyncPipeline","children","when","matches","callbackRef","React","useRef","updateCallbackRef","callback","current","check","useCallback","payload","value","get","useWillPipe","Promise","resolve","reject","then","p","finalP","Array","isArray","forEach","_p","catch","err","propTypes","PropTypes","string","isRequired","any"],"mappings":";;;;;;;;;;;;;;;;;;;;AAOe,SAASA,8BAAT,CAAsE,IAAA,EAAA;AAAA,EAA3BC,IAAAA,QAA2B,QAA3BA,QAA2B;AAAA,MAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,MAAXC,OAAW,QAAXA,OAAW,CAAA;AACnF,EAAA,IAAMC,WAAW,GAAGC,yBAAK,CAACC,MAAN,CAAa,IAAb,CAApB,CAAA;;AAEA,EAAA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAc;AACtCJ,IAAAA,WAAW,CAACK,OAAZ,GAAsBD,QAAtB,CAAA;AACD,GAFD,CAAA;;AAIA,EAAME,IAAAA,KAAK,GAAGL,yBAAK,CAACM,WAAN,CAAkB,UAAAC,OAAO,EAAI;AACzC,IAAA,IAAMC,KAAK,GAAGC,uBAAG,CAACF,OAAD,EAAUV,IAAV,CAAjB,CAAA;;AAEA,IAAIW,IAAAA,KAAK,KAAKV,OAAd,EAAuB;AACrB,MAAA,OAAO,IAAP,CAAA;AACD,KAAA;;AAED,IAAA,IAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjC,MAAOA,OAAAA,OAAO,CAACU,KAAD,CAAd,CAAA;AACD,KAAA;;AAED,IAAA,OAAO,KAAP,CAAA;AACD,GAZa,EAYX,CAACX,IAAD,EAAOC,OAAP,CAZW,CAAd,CAAA;AAcAY,EAAAA,WAAW,CAAC,UAACH,OAAD,EAAA;AAAA,IAAA,OAAa,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACxD,MAAA,IAAIR,KAAK,CAACE,OAAD,CAAT,EAAoB;AAClBI,QAAAA,OAAO,CAACC,OAAR,CAAgBb,WAAW,CAACK,OAAZ,CAAoBG,OAApB,CAAhB,CACGO,CAAAA,IADH,CACQ,YAAY;AAAA,UAAXC,IAAAA,CAAW,uEAAP,EAAO,CAAA;;AAChB,UAAIC,IAAAA,MAAM,GAAQT,aAAAA,CAAAA,EAAAA,EAAAA,OAAR,CAAV,CAAA;;AAEA,UAAA,IAAIU,KAAK,CAACC,OAAN,CAAcH,CAAd,CAAJ,EAAsB;AACpBA,YAAAA,CAAC,CAACI,OAAF,CAAU,UAACC,EAAD,EAAQ;AAChBJ,cAAAA,MAAM,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAQA,MAAR,CAAA,EAAmBI,EAAnB,CAAN,CAAA;AACD,aAFD,CAAA,CAAA;AAGD,WAAA;;AAEDR,UAAAA,OAAO,CAACI,MAAD,CAAP,CAAA;AACD,SAXH,CAYGK,CAAAA,KAZH,CAYS,UAACC,GAAD,EAAS;AACdT,UAAAA,MAAM,CAACS,GAAD,CAAN,CAAA;AACD,SAdH,CAAA,CAAA;AAeD,OAhBD,MAgBO;AACLV,QAAAA,OAAO,CAACL,OAAD,CAAP,CAAA;AACD,OAAA;AACF,KApBwB,CAAb,CAAA;AAAA,GAAD,EAoBP,CAACF,KAAD,CApBO,CAAX,CAAA;AAsBA,EAAA,oBACEL,yBAAC,CAAA,aAAA,CAAA,aAAD,EACE,IAAA,eAAAA,yBAAA,CAAA,aAAA,CAAC,yBAAD,EAAA;AAA2B,IAAA,QAAQ,EAAEE,iBAAAA;AAArC,GADF,CAAA,EAEGN,QAFH,CADF,CAAA;AAMD,CAAA;AAEDD,8BAA8B,CAAC4B,SAA/B,GAA2C;AACzC1B,EAAAA,IAAI,EAAE2B,6BAAS,CAACC,MAAV,CAAiBC,UADkB;AAEzC5B,EAAAA,OAAO,EAAE0B,6BAAS,CAACG,GAAAA;AAFsB,CAA3C;;;;"}
{"version":3,"file":"ConditionalNestedAsyncPipeline.js","sources":["../../../src/helpers/ConditionalNestedAsyncPipeline.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport useWillPipe from '../hooks/use-will-pipe'\r\nimport TriggerPipelineOnCallback from '../triggers/TriggerPipelineOnCallback'\r\nimport get from 'lodash/get'\r\nimport AsyncPipeline from './AsyncPipeline'\r\n\r\nexport default function ConditionalNestedAsyncPipeline ({ children, when, matches }) {\r\n  const callbackRef = React.useRef(null)\r\n\r\n  const updateCallbackRef = (callback) => {\r\n    callbackRef.current = callback\r\n  }\r\n\r\n  const check = React.useCallback(payload => {\r\n    const value = get(payload, when)\r\n\r\n    if (value === matches) {\r\n      return true\r\n    }\r\n\r\n    if (typeof matches === 'function') {\r\n      return matches(value)\r\n    }\r\n\r\n    return false\r\n  }, [when, matches])\r\n\r\n  useWillPipe((payload) => new Promise((resolve, reject) => {\r\n    if (check(payload)) {\r\n      Promise.resolve(callbackRef.current(payload))\r\n        .then((p = {}) => {\r\n          let finalP = { ...payload }\r\n\r\n          if (Array.isArray(p)) {\r\n            p.forEach((_p) => {\r\n              finalP = { ...finalP, ..._p }\r\n            })\r\n          }\r\n\r\n          resolve(finalP)\r\n        })\r\n        .catch((err) => {\r\n          reject(err)\r\n        })\r\n    } else {\r\n      resolve(payload)\r\n    }\r\n  }), [check])\r\n\r\n  return (\r\n    <AsyncPipeline>\r\n      <TriggerPipelineOnCallback callback={updateCallbackRef} />\r\n      {children}\r\n    </AsyncPipeline>\r\n  )\r\n}\r\n\r\nConditionalNestedAsyncPipeline.propTypes = {\r\n  when: PropTypes.string.isRequired,\r\n  matches: PropTypes.any\r\n}\r\n"],"names":["ConditionalNestedAsyncPipeline","children","when","matches","callbackRef","React","useRef","updateCallbackRef","callback","current","check","useCallback","payload","value","get","useWillPipe","Promise","resolve","reject","then","p","finalP","Array","isArray","forEach","_p","catch","err","propTypes","PropTypes","string","isRequired","any"],"mappings":";;;;;;;;AAOe,SAASA,8BAAT,OAAsE;AAAA,MAA3BC,QAA2B,QAA3BA,QAA2B;AAAA,MAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,MAAXC,OAAW,QAAXA,OAAW;AACnF,MAAMC,WAAW,GAAGC,KAAK,CAACC,MAAN,CAAa,IAAb,CAApB;;AAEA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAc;AACtCJ,IAAAA,WAAW,CAACK,OAAZ,GAAsBD,QAAtB;AACD,GAFD;;AAIA,MAAME,KAAK,GAAGL,KAAK,CAACM,WAAN,CAAkB,UAAAC,OAAO,EAAI;AACzC,QAAMC,KAAK,GAAGC,GAAG,CAACF,OAAD,EAAUV,IAAV,CAAjB;;AAEA,QAAIW,KAAK,KAAKV,OAAd,EAAuB;AACrB,aAAO,IAAP;AACD;;AAED,QAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjC,aAAOA,OAAO,CAACU,KAAD,CAAd;AACD;;AAED,WAAO,KAAP;AACD,GAZa,EAYX,CAACX,IAAD,EAAOC,OAAP,CAZW,CAAd;AAcAY,EAAAA,WAAW,CAAC,UAACH,OAAD;AAAA,WAAa,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACxD,UAAIR,KAAK,CAACE,OAAD,CAAT,EAAoB;AAClBI,QAAAA,OAAO,CAACC,OAAR,CAAgBb,WAAW,CAACK,OAAZ,CAAoBG,OAApB,CAAhB,EACGO,IADH,CACQ,YAAY;AAAA,cAAXC,CAAW,uEAAP,EAAO;;AAChB,cAAIC,MAAM,sBAAQT,OAAR,CAAV;;AAEA,cAAIU,KAAK,CAACC,OAAN,CAAcH,CAAd,CAAJ,EAAsB;AACpBA,YAAAA,CAAC,CAACI,OAAF,CAAU,UAACC,EAAD,EAAQ;AAChBJ,cAAAA,MAAM,qCAAQA,MAAR,GAAmBI,EAAnB,CAAN;AACD,aAFD;AAGD;;AAEDR,UAAAA,OAAO,CAACI,MAAD,CAAP;AACD,SAXH,EAYGK,KAZH,CAYS,UAACC,GAAD,EAAS;AACdT,UAAAA,MAAM,CAACS,GAAD,CAAN;AACD,SAdH;AAeD,OAhBD,MAgBO;AACLV,QAAAA,OAAO,CAACL,OAAD,CAAP;AACD;AACF,KApBwB,CAAb;AAAA,GAAD,EAoBP,CAACF,KAAD,CApBO,CAAX;AAsBA,sBACE,oBAAC,aAAD,qBACE,oBAAC,yBAAD;AAA2B,IAAA,QAAQ,EAAEH;AAArC,IADF,EAEGN,QAFH,CADF;AAMD;AAEDD,8BAA8B,CAAC4B,SAA/B,GAA2C;AACzC1B,EAAAA,IAAI,EAAE2B,SAAS,CAACC,MAAV,CAAiBC,UADkB;AAEzC5B,EAAAA,OAAO,EAAE0B,SAAS,CAACG;AAFsB,CAA3C;;;;"}